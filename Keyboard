# import modules
try:
    import Tkinter
except:
    import tkinter as Tkinter

import pyautogui

keys = [
    [
        # Layout Name
        ("Character_Keys"),
        # Layout Frame Pack arguments
        ({'side': 'top', 'expand': 'yes', 'fill': 'both'}),
        # list of Keys
        [
            # Key bunches
            ('~\n`', '!\n1', '@\n2', '#\n3', '$\n4', '%\n5', '^\n6', '&\n7', '*\n8', '(\n9', ')\n0', '_\n-', '+\n=',
             '|\n\\', 'backspace'),
            ('tab', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '{\n[', '}\n]', '   '),
            ('capslock', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':\n;', "\"\n'", "enter"),
            ("shift", 'z', 'x', 'c', 'v', 'b', 'n', 'm', '<\n,', '>\n.', '?\n/', "shift"),
            ("ctrl", "[+]", 'alt', '\t\tspace\t\t', 'alt', '[+]', '[=]', 'ctrl')
        ]
    ]
]

##  Frame Class
class Keyboard(Tkinter.Frame):
    def __init__(self, *args, **kwargs):
        Tkinter.Frame.__init__(self, *args, **kwargs)

        # Function For Creating Buttons
        self.create_frames_and_buttons()

    # Function For Extracting Data From KeyBoard Table
    # and then provide a well looking keyboard gui
    def create_frames_and_buttons(self):

        for layer_name, layer_properties, layer_keys in keys:
            store_layer = Tkinter.Frame(self)#LabelFrame(store_section)  # , text=layer_name)
            store_layer.pack(side='top', expand='yes', fill='both', padx=100, pady=100, ipadx=10, ipady=10)
            store_layer.pack(layer_properties)
            for key_bunch in layer_keys:
                store_key_frame = Tkinter.Frame(store_layer)
                store_key_frame.pack(side='top', expand='yes', fill='both')
                for k in key_bunch:
                    k = k.capitalize()
                    if len(k) <= 3:
                        store_button = Tkinter.Button(store_key_frame, text=k, width=2, height=2)
                    else:
                        store_button = Tkinter.Button(store_key_frame, text=k.center(5, ' '), height=2)
                    if " " in k:
                        store_button['state'] = 'disable'
                    # flat, groove, raised, ridge, solid, or sunken
                    store_button['relief'] = "sunken"
                    store_button['bg'] = "powderblue"
                    store_button['command'] = lambda q=k: self.button_command(q, store_button)
                    store_button.pack(side='left', fill='both', expand='yes')
        return

        # Function For Detecting Pressed Keyword.

    def button_command(self, event, button):
        button.update_idletasks()
        print(button.winfo_parent().winfo_parent())
        return


# Creating Main Window
def main():
    root = Tkinter.Tk(className=" Python Virtual KeyBoard")
    Keyboard(root).pack()
    root.mainloop()
    return


# Function Trigger
if __name__ == '__main__':
    main()