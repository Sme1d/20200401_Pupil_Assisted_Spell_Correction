import time
import tkinter as tk
from functools import partial
import constant

import tobii_research as tr


def get_time_stamp():
    return int((time.time() - constant.START_TIME) * 1000)


def color_widget(widget, color):
    if constant.PLATFORM == "Darwin":
        widget['highlightbackground'] = color
    else:
        widget['bg'] = color


def log_event(msg):
    file = open(constant.FILE_NAME, 'a')
    file.write(msg)
    file.close()


def key_press(k):
    global key_pressed
    key_pressed = True
    color_widget(selected_widget, constant.COLOR_PRESSED)
    log_event('{0}, {1}, null, null, null, null\n'.format(get_time_stamp(), k))
    if k == 'Enter':
        text_input['text'] = ""
    elif k == 'Backspace':
        text_input['text'] = text_input['text'][:-1]
    elif k == 'Escape':
        root.destroy()
        exit()
    else:
        text_input['text'] += k
    return


def check_gaze(gaze_data):
    global selected_widget
    global selection_time
    global key_pressed

    left = gaze_data['left_gaze_point_on_display_area']
    right = gaze_data['right_gaze_point_on_display_area']
    gaze_point = ((left[0] + right[0]) / 2, (left[1] + right[1]) / 2)
    x_on_screen = gaze_point[0] * canvas.winfo_width()
    y_on_screen = gaze_point[1] * canvas.winfo_height()

    log_event('{0}, null, {1}, {2}, {3}, {4}\n'.format(get_time_stamp(), gaze_data['left_pupil_diameter'], gaze_data['left_pupil_validity'], gaze_data['right_pupil_diameter'], gaze_data['right_pupil_validity']))

    hovered_widget = root.winfo_containing(x_on_screen, y_on_screen)

    if not key_pressed:
        if type(hovered_widget) == tk.Button:
            if hovered_widget == selected_widget:
                if (get_time_stamp() - selection_time) > constant.DWELL_TIME:
                    selected_widget.invoke()
            else:
                if selected_widget:
                    color_widget(selected_widget, constant.COLOR_NEUTRAL)
                selected_widget = hovered_widget
                color_widget(selected_widget, constant.COLOR_HOVERED)
                selection_time = get_time_stamp()
        else:
            color_widget(selected_widget, constant.COLOR_NEUTRAL)
    elif get_time_stamp() - selection_time >= constant.DWELL_TIME + constant.PAUSE_TIME:
        key_pressed = False
        color_widget(selected_widget, constant.COLOR_NEUTRAL)
        selected_widget = None


# Variables
selected_widget = None
selection_time = None
key_pressed = False

# Setup Tkinter
root = tk.Tk()
root.title("Canvas")
root.attributes('-fullscreen', True)
canvas = tk.Canvas(root)
canvas.pack(expand='yes', fill='both')

input_frame = tk.Frame(canvas)
input_frame.pack(side='top', expand='yes', fill='both')
text_label = tk.Label(input_frame, text="Lorem ipsum dolor est matum. Lorem ipsum....", borderwidth=2, relief="groove")
text_label.pack(side='top', expand='yes', fill='both')
text_input = tk.Label(input_frame, text="", borderwidth=2, relief="groove")
text_input.pack(side='top', expand='yes', fill='both')


# Setup Keyboard
keyboard_frame = tk.Frame(canvas)
keyboard_frame.pack(side='top', expand='yes', fill='both')
for key_row in constant.KEYS:
    store_key_row = tk.Frame(keyboard_frame)
    store_key_row.pack(side='top', expand='yes', fill='both')
    for k in key_row:
        k = k.capitalize()
        store_key = tk.Button(store_key_row, text=k, width=2, height=2, command=partial(key_press, k))
        store_key.pack(side='left', fill='both', expand='yes')
        color_widget(store_key, constant.COLOR_NEUTRAL)



# Setup Eyetracker
found_eyetrackers = tr.find_all_eyetrackers()
my_eyetracker = found_eyetrackers[0]
my_eyetracker.subscribe_to(tr.EYETRACKER_GAZE_DATA, check_gaze, as_dictionary=True)


# Setup Logging
open(constant.FILE_NAME, 'w').close()
log_event('time stamp, pressed key,  left pupil size, left pupil validity, right pupil size, right pupil validity\n')

root.mainloop()