import time
import platform
import tkinter as tk
from functools import partial

import tobii_research as tr


def get_time_stamp():
    return int((time.time() - START_TIME) * 1000)


def color_widget(widget, color):
    if PLATTFORM == "Darwin":
        widget['highlightbackground'] = color
    else:
        widget['bg'] = color


def log_event(msg):
    file = open(FILE_NAME, 'a')
    file.write(msg)
    file.close()


def key_press(k):
    color_widget(active_widget, COLOR_PRESSED)
    log_event('{0}, {1}, null, null, null, null\n'.format(get_time_stamp(), k))
    if k == 'Enter':
        text_input['text'] = ""
    elif k == 'Backspace':
        text_input['text'] = text_input['text'][:-1]
    elif k == 'Escape':
        root.destroy()
        exit()
    else:
        text_input['text'] += k
    return


def check_gaze(gaze_data):
    global active_widget
    global time_stamp

    left = gaze_data['left_gaze_point_on_display_area']
    right = gaze_data['right_gaze_point_on_display_area']
    gaze_point = ((left[0] + right[0]) / 2, (left[1] + right[1]) / 2)
    x_on_screen = gaze_point[0] * canvas.winfo_width()
    y_on_screen = gaze_point[1] * canvas.winfo_height()

    log_event('{0}, null, {1}, {2}, {3}, {4}\n'.format(get_time_stamp(), gaze_data['left_pupil_diameter'], gaze_data['left_pupil_validity'], gaze_data['right_pupil_diameter'], gaze_data['right_pupil_validity']))

    hovered_widget = root.winfo_containing(x_on_screen, y_on_screen)
    if type(hovered_widget) == tk.Button:
        if hovered_widget == active_widget:
            passed_time = get_time_stamp() - time_stamp
            if passed_time > DWELL_TIME:
                active_widget.invoke()
                active_widget = None
        else:
            if active_widget:
                color_widget(active_widget, COLOR_NEUTRAL)
            active_widget = hovered_widget
            color_widget(active_widget, COLOR_HOVERED)
            time_stamp = get_time_stamp()
    else:
        color_widget(active_widget, COLOR_NEUTRAL)


# Variables
active_widget = None
time_stamp = None

COLOR_NEUTRAL = "grey"
COLOR_HOVERED = "yellow"
COLOR_PRESSED = "red"
DWELL_TIME = 700
START_TIME = time.time()
FILE_NAME = 'testfile.csv'
PLATTFORM = platform.system()
KEYS = [# Key rows
    ('escape', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '?', '!'),
    ('q', 'w', 'e', 'r', 't', 'z', 'u', 'i', 'o', 'p', 'ü'),
    ('a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'ö', 'ä'),
    ('y', 'z', 'c', 'v', 'b', 'n', 'm', ',', '.', 'backspace', 'enter'),
    " "]

# Setup Tkinter
root = tk.Tk()
root.title("Canvas")
root.attributes('-fullscreen', True)
canvas = tk.Canvas(root)
canvas.pack(expand='yes', fill='both')

input_frame = tk.Frame(canvas)
input_frame.pack(side='top', expand='yes', fill='both')
text_label = tk.Label(input_frame, text="Lorem ipsum dolor est matum. Lorem ipsum....", borderwidth=2, relief="groove")
text_label.pack(side='top', expand='yes', fill='both')
text_input = tk.Label(input_frame, text="", borderwidth=2, relief="groove")
text_input.pack(side='top', expand='yes', fill='both')


# Setup Keyboard
keyboard_frame = tk.Frame(canvas)
keyboard_frame.pack(side='top', expand='yes', fill='both')
for key_row in KEYS:
    store_key_row = tk.Frame(keyboard_frame)
    store_key_row.pack(side='top', expand='yes', fill='both')
    for k in key_row:
        k = k.capitalize()
        store_key = tk.Button(store_key_row, text=k, width=2, height=2, command=partial(key_press, k))
        store_key.pack(side='left', fill='both', expand='yes')
        color_widget(store_key, COLOR_NEUTRAL)



# Setup Eyetracker
found_eyetrackers = tr.find_all_eyetrackers()
my_eyetracker = found_eyetrackers[0]
my_eyetracker.subscribe_to(tr.EYETRACKER_GAZE_DATA, check_gaze, as_dictionary=True)


# Setup Logging
file = open(FILE_NAME, 'w')
file.close()
log_event('time stamp, pressed key,  left pupil size, left pupil validity, right pupil size, right pupil validity\n')

root.mainloop()